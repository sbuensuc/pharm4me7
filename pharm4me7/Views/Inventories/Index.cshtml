@model IEnumerable<pharm4me7.Models.Inventory>

@{
    ViewBag.Title = "Inventory";
}

<h2>Inventory</h2>

<p>
    @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-primary" })
</p>
<input type="text" id="searchItem" onkeyup="searchFunction()" placeholder="Item...">
<input type="text" id="searchBrand" onkeyup="searchFunction()" placeholder="Brand...">
<table id="inventoryTable"class="table">
    <tr>
        <th onclick="sortTable(0)">
            Item
            
        </th>
        <th onclick="sortTable(1)">
            Amount
           
        </th>
        <th onclick="sortTable(2)">
            Unit Type
         
        </th>
        <th onclick="sortTable(3)">
            Brand
  
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td data-th="Item">
            @Html.DisplayFor(modelItem => item.item.Name)
        </td>
        <td data-th="Amount">
            @Html.DisplayFor(modelItem => item.Amount)
        </td>
        <td data-th="Unit Type">
            @Html.DisplayFor(modelItem => item.DispType)
        </td>
        <td data-th="Brand">
            @Html.DisplayFor(modelItem => item.Brand)
        </td>
        <td data-th="Action">
            <div class="btn-group">
                @Html.ActionLink("Edit", "Edit", new { id = item.InventoryId }, new { @class = "btn btn-success" })
                @*@Html.ActionLink("Details", "Details", new { id = item.InventoryId }, new { @class = "btn btn-info" })*@
                @Html.ActionLink("Delete", "Delete", new { id = item.InventoryId }, new { @class = "btn btn-danger" })
            </div>
        </td>
    </tr>
}

</table>

<script>
   
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById("inventoryTable");
  switching = true;
  dir = "asc";
  while (switching) {
	switching = false;
	rows = table.rows;
	for (i = 1; i < (rows.length - 1); i++) {
  	 shouldSwitch = false;
  	x = rows[i].getElementsByTagName("TD")[n];
  	 y = rows[i + 1].getElementsByTagName("TD")[n];
  	if (dir == "asc") {
    	if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
      	 shouldSwitch = true;
      	 break;
    	}
  	 } else if (dir == "desc") {
    	if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
      	 shouldSwitch = true;
      	 break;
    	}
  	 }
	}
	if (shouldSwitch) {
  	 rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
  	 switching = true;
  	switchcount ++;
	} else {
  	 if (switchcount == 0 && dir == "asc") {
    	 dir = "desc";
    	switching = true;
  	 }
	}
  }
}

function searchFunction() {
    var input1, filter1, filter2, td, i, rows;



        filter1 = document.querySelector('#searchItem').value.toUpperCase();
        filter2 = document.querySelector('#searchBrand').value.toUpperCase();

        rows = document.querySelector("#inventoryTable tbody").rows;
    
 
        for (i = 1; i < rows.length; i++) {
            var itemCol = rows[i].cells[0].textContent.toUpperCase();
            var brandCol = rows[i].cells[3].textContent.toUpperCase();


            if (itemCol.indexOf(filter1) > -1 && brandCol.indexOf(filter2) > -1) {
                rows[i].style.display = "";
            } else {
                rows[i].style.display = "none";
            }

        }
    

  
}
</script>
