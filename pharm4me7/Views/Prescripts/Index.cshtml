@model IEnumerable<pharm4me7.Models.Prescript>

@{
    ViewBag.Title = "Prescriptions";
}

<h2>Prescriptions</h2>

<p>
@if (User.IsInRole("Admin") || User.IsInRole("Doctor"))
{
    @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-primary" })
}
</p>
<input type="text" id="searchItem" onkeyup="searchFunction()" placeholder="Item...">
<input type="text" id="searchFName" onkeyup="searchFunction()" placeholder="First Name...">
<input type="text" id="searchLName" onkeyup="searchFunction()" placeholder="Last Name...">
<input type="text" id="searchDate" onkeyup="searchFunction()" placeholder="Date...">
<input type="text" id="searchPresc" onkeyup="searchFunction()" placeholder="Prescribed By...">
<table id="prescriptTable" class="table">
    <tr>
        <th onclick="sortTable(0)">
            Item

        </th>
        <th onclick="sortTable(1)">
            First Name
 
        </th>
        <th onclick="sortTable(2)">
            Last Name

        </th>
        <th onclick="sortTable(3)">
            Date

        </th>
        <th onclick="sortTable(4)">
            Amount

        </th>
        <th onclick="sortTable(5)">
            Unit Type

        </th>
        <th onclick="sortTable(6)">
            Details
        </th>
        <th onclick="sortTable(7)">
            Brand

        </th>
        <th onclick="sortTable(8)">
            @Html.DisplayNameFor(model => model.Refill)
        </th>
        <th onclick="sortTable(9)">
            Refills Used
        </th>
        <th onclick="sortTable(10)">
            Prescribed By
 
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td data-th="Item" data-th="Item">
            @Html.DisplayFor(modelItem => item.item.Name)
        </td>
        <td data-th="First Name" data-th="First Name">
            @Html.DisplayFor(modelItem => item.Patient.FirstName)
        </td>
        <td data-th="Last Name" data-th="Last Name">
            @Html.DisplayFor(modelItem => item.Patient.LastName)
        </td>
        <td data-th="Date" data-th="Date">
            @Html.DisplayFor(modelItem => item.Date)
        </td>
        <td data-th="Amount" data-th="Amount">
            @Html.DisplayFor(modelItem => item.Disp)
        </td>
        <td data-th="Unit Type" data-th="Unit Type">
            @Html.DisplayFor(modelItem => item.DispType)
        </td>
        <td data-th="Details" data-th="Details">
            @Html.DisplayFor(modelItem => item.Sig)
        </td>
        <td data-th="Brand" data-th="Brand">
            @Html.DisplayFor(modelItem => item.Sub)
        </td>
        <td data-th="Refill" data-th="Refill">
            @Html.DisplayFor(modelItem => item.Refill)
        </td>
        <td data-th="Refill" data-th="Refill">
            @Html.DisplayFor(modelItem => item.RefillsUsed)
        </td>
        <td data-th="Prescribed By" data-th="Prescribed By">
            @Html.DisplayFor(modelItem => item.Doctor.LastName), @Html.DisplayFor(modelItem => item.Doctor.FirstName)
        </td>
        <td data-th="Action" data-th="Action">
            <div class="btn-group">
                @Html.ActionLink("Details", "Details", new { id = item.PrescriptId }, new { @class = "btn btn-info" })
            
            </div>

</td>
    </tr>
}

</table>

<script>
    function searchFunction() {
        var input1, filter1, filter2, filter3, filter4, filter5, td, i, rows;

        filter1 = document.querySelector('#searchItem').value.toUpperCase();
        filter2 = document.querySelector('#searchFName').value.toUpperCase();
        filter3 = document.querySelector('#searchLName').value.toUpperCase();
        filter4 = document.querySelector('#searchDate').value.toUpperCase();
        filter5 = document.querySelector('#searchPresc').value.toUpperCase();

        rows = document.querySelector("#prescriptTable tbody").rows;


        for (i = 1; i < rows.length; i++) {
            var itemCol = rows[i].cells[0].textContent.toUpperCase();
            var fNameCol = rows[i].cells[1].textContent.toUpperCase();
            var lNameCol = rows[i].cells[2].textContent.toUpperCase();
            var dateCol = rows[i].cells[3].textContent.toUpperCase();
            var prescCol = rows[i].cells[10].textContent.toUpperCase();


            if (itemCol.indexOf(filter1) > -1 && fNameCol.indexOf(filter2) > -1 && lNameCol.indexOf(filter3) > -1 && dateCol.indexOf(filter4) > -1 && prescCol.indexOf(filter5) > -1) {
                rows[i].style.display = "";
            } else {
                rows[i].style.display = "none";
            }

        }

    }


function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById("prescriptTable");
  switching = true;
  dir = "asc";
  while (switching) {
	switching = false;
	rows = table.rows;
	for (i = 1; i < (rows.length - 1); i++) {
  	 shouldSwitch = false;
  	x = rows[i].getElementsByTagName("TD")[n];
  	 y = rows[i + 1].getElementsByTagName("TD")[n];
  	if (dir == "asc") {
    	if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
      	 shouldSwitch = true;
      	 break;
    	}
  	 } else if (dir == "desc") {
    	if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
      	 shouldSwitch = true;
      	 break;
    	}
  	 }
	}
	if (shouldSwitch) {
  	 rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
  	 switching = true;
  	switchcount ++;
	} else {
  	 if (switchcount == 0 && dir == "asc") {
    	 dir = "desc";
    	switching = true;
  	 }
	}
  }
}
</script>
